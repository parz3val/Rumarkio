{"$message_type":"diagnostic","message":"unused import: `std::fmt::format`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/store/supbase/mod.rs","byte_start":4,"byte_end":20,"line_start":1,"line_end":1,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use std::fmt::format;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/store/supbase/mod.rs","byte_start":0,"byte_end":21,"line_start":1,"line_end":1,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"use std::fmt::format;","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::fmt::format`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/store/supbase/mod.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fmt::format;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `User`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/store/supbase/mod.rs","byte_start":100,"byte_end":104,"line_start":5,"line_end":5,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"    user::{SignupForm, User},","highlight_start":24,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/store/supbase/mod.rs","byte_start":98,"byte_end":104,"line_start":5,"line_end":5,"column_start":22,"column_end":28,"is_primary":true,"text":[{"text":"    user::{SignupForm, User},","highlight_start":22,"highlight_end":28}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `User`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/store/supbase/mod.rs:5:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    user::{SignupForm, User},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `User`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/types/database.rs","byte_start":52,"byte_end":56,"line_start":3,"line_end":3,"column_start":31,"column_end":35,"is_primary":true,"text":[{"text":"use super::user::{SignupForm, User};","highlight_start":31,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/types/database.rs","byte_start":50,"byte_end":56,"line_start":3,"line_end":3,"column_start":29,"column_end":35,"is_primary":true,"text":[{"text":"use super::user::{SignupForm, User};","highlight_start":29,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `User`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types/database.rs:3:31\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::user::{SignupForm, User};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified","code":{"code":"async_fn_in_trait","explanation":null},"level":"warning","spans":[{"file_name":"src/types/database.rs","byte_start":157,"byte_end":162,"line_start":11,"line_end":11,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    async fn create_user(&self, user: SignupForm) -> Result<(), Error>;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(async_fn_in_trait)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change","code":null,"level":"help","spans":[{"file_name":"src/types/database.rs","byte_start":157,"byte_end":163,"line_start":11,"line_end":11,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    async fn create_user(&self, user: SignupForm) -> Result<(), Error>;","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/types/database.rs","byte_start":206,"byte_end":206,"line_start":11,"line_end":11,"column_start":54,"column_end":54,"is_primary":true,"text":[{"text":"    async fn create_user(&self, user: SignupForm) -> Result<(), Error>;","highlight_start":54,"highlight_end":54}],"label":null,"suggested_replacement":"impl std::future::Future<Output = ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/types/database.rs","byte_start":223,"byte_end":223,"line_start":11,"line_end":11,"column_start":71,"column_end":71,"is_primary":true,"text":[{"text":"    async fn create_user(&self, user: SignupForm) -> Result<(), Error>;","highlight_start":71,"highlight_end":71}],"label":null,"suggested_replacement":"> + Send","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types/database.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn create_user(&self, user: SignupForm) -> Result<(), Error>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(async_fn_in_trait)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;9masync \u001b[0m\u001b[0mfn create_user(&self, user: SignupForm) -> Result<(), Error>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn create_user(&self, user: SignupForm) -> \u001b[0m\u001b[0m\u001b[38;5;10mimpl std::future::Future<Output = \u001b[0m\u001b[0mResult<(), Error>\u001b[0m\u001b[0m\u001b[38;5;10m> + Send\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified","code":{"code":"async_fn_in_trait","explanation":null},"level":"warning","spans":[{"file_name":"src/types/database.rs","byte_start":229,"byte_end":234,"line_start":12,"line_end":12,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    async fn get_user_by_email(&self, email: String) -> Result<(), Error>;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change","code":null,"level":"help","spans":[{"file_name":"src/types/database.rs","byte_start":229,"byte_end":235,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    async fn get_user_by_email(&self, email: String) -> Result<(), Error>;","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/types/database.rs","byte_start":281,"byte_end":281,"line_start":12,"line_end":12,"column_start":57,"column_end":57,"is_primary":true,"text":[{"text":"    async fn get_user_by_email(&self, email: String) -> Result<(), Error>;","highlight_start":57,"highlight_end":57}],"label":null,"suggested_replacement":"impl std::future::Future<Output = ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/types/database.rs","byte_start":298,"byte_end":298,"line_start":12,"line_end":12,"column_start":74,"column_end":74,"is_primary":true,"text":[{"text":"    async fn get_user_by_email(&self, email: String) -> Result<(), Error>;","highlight_start":74,"highlight_end":74}],"label":null,"suggested_replacement":"> + Send","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of `async fn` in public traits is discouraged as auto trait bounds cannot be specified\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/types/database.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn get_user_by_email(&self, email: String) -> Result<(), Error>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: you can suppress this lint if you plan to use the trait only in your own code, or do not care about auto traits like `Send` on the `Future`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can alternatively desugar to a normal `fn` that returns `impl Future` and add any desired bounds such as `Send`, but these cannot be relaxed without a breaking API change\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;9masync \u001b[0m\u001b[0mfn get_user_by_email(&self, email: String) -> Result<(), Error>;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    fn get_user_by_email(&self, email: String) -> \u001b[0m\u001b[0m\u001b[38;5;10mimpl std::future::Future<Output = \u001b[0m\u001b[0mResult<(), Error>\u001b[0m\u001b[0m\u001b[38;5;10m> + Send\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"5 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 5 warnings emitted\u001b[0m\n\n"}
